#### TODO {{{
# cds should back up current vue dataset, and import new vue dataset automatically
# Mount MAP rev with sshfs
# }}}

#### Mode Trap {{{
if [[ $MSH_KIWIPLAN_MODE != "MAP" && $MSH_KIWIPLAN_MODE != "VUE" ]]; then
	return
fi
# }}}

#### Prompt {{{

# (Internal) Shell : Top Prompt
# _stp : Show top prompt
_stp() {
  _stp_id
  e " $CYAN$(rnode $CDS \/ 1) $(rnode $CDS \/ 0)   $BLUE$(vt) | $MSH_KIWIPLAN_MODE | $PJ   $GREEN $SV | $MAP_REV | $MAP_DATA_REV $FINISH"
  _stp_command
}

# }}}

#### General Developement {{{

# General Navigation {{{

export DS=/KIWI/datasets

# Selecting the development mode
mode() {
  menu "echo 'VUE\nMAP'"
  mcv MSH_KIWIPLAN_MODE $menu
}

# }}}

# Data Set {{{

# Data Set : Unload Data Set
# uds a.dump.tar : Unload a.dump.tar and change to that dataset
uds() {
	if [[ $2 != "" ]]; then
		dsname=$2
	else
		dsname=$1
	fi
	dspath=$DS/Kall/$dsname

	wtl "Unloading $1 to $dsname"
	
	pushd .

	if [[ -d $dspath ]]; then
		r $dspath
	fi
	md $dspath
	cp $1 $dspath/$1.tar
	d $dspath
	uz $1.tar
	uz *

# Logs
	mmd *logs* LOGS
	d LOGS
	m * "*.tar"
	uz *
	d ..

# MAP
	mmd *classic* MAP
	d MAP
#  m * map.sql
 m * "*.tar"
 uz *
  mapprofile
  d ..

# SQL
	mmd *.dump VUE
  mv time.properties VUE
	d VUE
	mtp * '$SQL_PREFIX$(lnode $f . 1).sql'
	mtp *man* '$(echo $f | ts man mapman)'
	d ..

	wtu
	cds

	popd
}

# Data Set: Change Data Set
# cds : Change data set
# cds maponly : Change the MAP data set
cds() {
  wtl "Changing dataset"
  sps
  mcv CDS $(pwd) kiwiplan
  rm /kiwi/data
  dl $(pwd)/MAP /kiwi/data
  if ls $(pwd)/MAP/*.sql; then
    svbur SQL_PREFIX
		sqlrm map
		sqlmk map
		sql map < $(pwd)/MAP/*.sql
    svpbr SQL_PREFIX
    KWSQL_FILE=$(pwd)/MAP/kwsql
    r $KWSQL_FILE
    e "DATA=map" >> $KWSQL_FILE
    e "HOST=localhost" >> $KWSQL_FILE
    e "INTERFACE=sql" >> $KWSQL_FILE
    e "LOG=error" >> $KWSQL_FILE
    e "LOGPID=1" >> $KWSQL_FILE
    e "USER=$MSH_SQL_USER" >> $KWSQL_FILE
    e "PASS=$MSH_SQL_PASS" >> $KWSQL_FILE
	fi
  if [[ $1 != "maponly" ]]; then
    jdi $1
  fi
  ss
  wtu "Changing dataset [DONE]"
}

# Data Set: Data Sets
# ds : Go to the data sets directory
ds() {
  o $DS
}

# Data Set: MAP Data Set
# mds : Go to the MAP data set
mds() {
  o $CDS/MAP
}

# Data Set: Java Data Set
# vds : Go to the Java data set
vds() {
  o $CDS/VUE
}

# }}}

# Workflow {{{

upall() {
  pj
	vu
  jats
  upjava
  upmap
}

# }}}

# Servers {{{

# Server : Calypso
# calypso : Go to the mounted server calypso
calypso() {
  dm calypso
}

# Server : VULT
# vult : SSH to the vult server
vult() {
  ssh nzvult
}

# Login to nzboom
# If $1 is defined then upload the file to nzboom shared folder
boom() {
  if [[ $1 = "" ]]; then
    ssh nzboom
  elif [[ -d $1 ]]; then
    if [[ $2 = "" ]]; then
      scp -r $1 nzboom:~/shared
    else
      scp -r $1 nzboom:~/shared/$2
    fi
  else
    if [[ $2 = "" ]]; then
      scp $1 nzboom:~/shared
    else
      scp $1 nzboom:~/shared/$2
    fi
  fi
}

support() {
# tucan4
  ssh remuser@kiwidev
}

# Download from boom
# If $1 is defined then download the file to nzboom shared folder
boomdl() {
  dc boom
	rmu 'nzboom:~/shared/*' .
}

gromblecollect() {
  dc gromble
  scp -r gromble:/support/support/nzcollect/$1 .
}

sim19collect() {
  dc sim19
	scp sim@sim19.kiwiplan.us:~/$1 .
}

gromble() {
  sshpass -p $PASS ssh gromble $@
}

release() {
  if [[ $1 = "" ]]; then
    gromble "find /support/support/revisions/TEST_ONLY/refresh/"
  else
    sshpass -p $PASS scp -r ${@:2} gromble:/support/support/revisions/TEST_ONLY/refresh/$1
  fi
}

# Release : All
# releaseall "ssd@nzodie:/src/kiwi_7.91_01mar2014/linux_2.12_kiwi_7.91_140301.140331.rev.tar.gz" 0228
releaseall() {
# MAP Revision
  gromble "rm -rf /support/support/revisions/TEST_ONLY/refresh/classic/*"
  work release
  r *
  scp $1 .
  release classic *

# VUE Data
  gromble "rm -rf /support/support/revisions/TEST_ONLY/refresh/vue/data/*"
  vds
  release vue/data *$2*

# VUE Revision
  gromble "rm -rf /support/support/revisions/TEST_ONLY/refresh/vue/*.sh"
  jid
  release vue *.sh
  gromble "rm -rf /support/support/revisions/TEST_ONLY/refresh/vue/windows/*"
  jwid
  release vue/windows windows/*

  release
}

# suboom : Login to nzboom as ssd
suboom() {
  ssh ssd@nzboom
}

# odie : Login to nzodie
odie() {
  ssh ssd@nzodie
}

# 
kpi() {
#  ssh kpi@maven "./haoyang_kpi_export.sh"
  r $COMMON/kpi/*
  scp "kpi@maven:/home/kpi/haoyang/*.csv" $COMMON/kpi
#  ooffice $COMMON/kpi/*.csv
}

# Login to aurora
aurora() {
  o $MNT/aurora
}

tomelody() {
  scp -r $1 ssd@nzdawn:/data/melody
}

# Drop file to martina
# tomartina file
tomartina() {
	scp $1 ssd@aurora:/data/martina
}

# Pickup file from martina
# frommartina file
frommartina() {
	scp -r ssd@aurora:/data/martina/$1 .
}

# Demo machine
demo() {
  ssh ssd@nzjavademomsg
}

# }}}

#}}}

#### Java Development {{{

export JAVA_HOME=/usr/lib/jvm/java-7-oracle

ja() {
  mvn clean install
}

jats() {
  if [[ -d kp-parent ]]; then
    d kp-parent
    mvn clean install -Dmaven.test.skip
    d ..
  fi
  mvn clean install -Dmaven.test.skip
}

dp() {
  deploy
}

jr() {
  jrebel
}

# Java Navigation {{{

export JPJ_ROOT=~/projects
export JPD=$(lnode $JSV _ 1)
MERGEREV=("all-8.14.1") export MERGEREV
export JREV=$(e $JPJ | cut -c5-)
export JHD=mes-8.0
export JMB=mes-8.0
export SITE_NAME=$JSV
export VDS=$CDS/VUE
export REBEL_HOME=~/.IdeaIC11/config/plugins/jr-ide-idea/lib/jrebel
export CM_ROOT=/kiwi/java/comms
export WK_ROOT=/kiwi/java/work
export IN_ROOT=~/installers
export JSVN="svn+ssh://corona2/svn/mapjava"
if [[ $MSH_KIWIPLAN_MODE == "VUE" ]]; then
  export SQL_PREFIX=${SITE_NAME}_
  export PJ_ROOT=$JPJ_ROOT
  export PJ=$JPJ
  export HD=$JHD
  export MB=$JMB
	export SV_ROOT=$JSV_ROOT
  export SV=$JSV
  export SVN=$JSVN
fi

alias vue="mode <<< 1"

# Go to java service logs directory
svl() {
  o $SV_ROOT
  o $SV
  o current
  o logs
  wtt svl
} 

# Go to java tomcat directory
tc() {
  o $TC_ROOT/$SV/current
}

# Go to java comms directory
cm() {
  o $CM_ROOT/$SV
}

# Go to java work directory
wk() {
  o $WK_ROOT/$SV
}

sss() {
  if [[ $(pf jvm java jini | wc -l) == 0 ]]; then
    e DOWN $(evn "grep -ir exception $SV_ROOT/$SV/current/logs | grep -v Lease" && echo with ERROR)
  elif [[ $(pf jvm java catalina | wc -l) == 1 ]]; then
    e UP $(evn "grep -ir exception $SV_ROOT/$SV/current/logs | grep -v Lease" && echo with ERROR)
  else
    e STARTING $(evn "grep -ir exception $SV_ROOT/$SV/current/logs | grep -v Lease" && echo with ERROR)
  fi
}

ssse() {
  scrond "sss > $MOS_TMP/sss"
}

# Start java services
sts() {
  pwd=$(pwd)
  sv
  d logs
  r
  d ../conf/kiwiplan/jini/
  debug_port=13066
  for launchfile in *.xml; do
    sed -i '/debugport/d' $launchfile; sed -i '/rmidport/a debugport="'$debug_port'"' $launchfile
    (( debug_port++ ))
  done
  mwk
  evn $SV_ROOT/$SV/current/bin/startservers.sh
  o $pwd
}

# Stop java services
sps() {
  pk jvm java $SITE_NAME
}

dps() {
  dp
  ss
}

# Start/Stop java services
ss() {
	sss=$(decolor <<< $(sss))
	case $sss in
		DOWN) sts;;
		*) sps; sts;;
	esac
}

# Start Scheduler
# ssc : Start TSS scheduler
ssc() {
  sv
  wtt ssc
  bin/runpcstssscheduler.sh
  wtt "ssc[DONE]"
}


# Java Development : Installer Directory
# jind : Go to java installer directory
jind() {
  d $IN_ROOT/$JIN
}

# rmsite : Removes current java revision installation
rmsite() {
  rm -rf $SV_ROOT/$SV
  rm -rf $WK_ROOT/$SV
  rm -rf $TC_ROOT/$SV
	rmsitedb
}
rmsitedb() {
  for db in $(sqlld); do
    sqlrm $db
  done
}

# Java Development: Log
# lg : Tail logs
lg() {
  if [[ $1 = "" ]]; then
    tail -f logs/*
  else
    tail -f logs/$1*.log.txt
  fi
}

# Java Development: Log Error
# lge : Tail logs and monitor for errors
lge() {
  if [[ -d logs ]]; then
    d logs
  fi
  sl exception
}

# Start tomcat debug
dbt() {
  pk catalina
  export JPDA_ADDRESS=13067
  export JPDA_TRANSPORT=dt_socket
  tc
  bin/catalina.sh jpda run
}

# Edit java fix time
fixtime() {
  vi $SV_ROOT/$SV/current/conf/kiwiplan/time.properties
  cp $SV_ROOT/$SV/current/conf/kiwiplan/time.properties $TC_ROOT/$SV/current/kiwiconf/kiwiplan/time.properties
}

# Remove fix time
unfixtime() {
  r $SV_ROOT/$SV/current/conf/kiwiplan/time.properties
  r $TC_ROOT/$SV/current/kiwiconf/kiwiplan/time.properties
  mds
  bur PROFILE
  mapprofile
}

# View latest java comms response
cmr() {
  cat kiwi_to_host/$(ls kiwi_to_host -rt | tail -1)
}

# Clear java comms folders
cmc() {
  rm host_to_kiwi/* <<< "y"
  rm kiwi_to_host/* <<< "y"
  rm archive/* <<< "y"
}

# Place java comms request
cmp() {
  cp $1 host_to_kiwi
}

# }}}

# Java Setup {{{

# Java Debug: Debug Java service
# jdb : Pick Java Service to debug
jdb() {
  grep debug $SV_ROOT/$SV/current/conf/kiwiplan/jini/*.xml
}

# Java Setup: Check out Java project
# jco mes-8.0 : Check out mes-8.0 projects
jco() {
  vue
  pjr
  mvn project:workspace << EOF
$SVN/projects/$1

Y
EOF
}

#NEEDDOC
jpj() {
  vue
  menu 'svn ls $SVN/projects | si master | s '$1' | sed "s/\///"'
  mcv JPJ $menu kiwiplan
  if [[ -d $PJ_ROOT/$PJ ]]; then
    pj
  else
    jco $menu
  fi
}

# Copy universal java licence file
# cplic csc : Copy CSC licence to the current directory
cplic() {
  cp $COMMON/licence/$1.licence .
}

#NEEDDOC
jsv() {
  sps
  vue
  menu 'svn ls $SVN/projects | si master | s '$1' | sed "s/\///"'
  mcv JSV $menu kiwiplan
  if ! sv; then
    jin
  fi
  #jdi
  ss
}

jstss() {
	cp $COMMON/roadgrids/* $SV_ROOT/$SV/current/conf/kiwiplan/roadgrids
}

jtst() {
	if [[ $1 == "" ]]; then
		maven build-all || cat target/test-reports/*.txt
	else
		testclass=$(find testsrc -name "$1.java" | cut -d "." -f1 | sed 's/^testsrc\///g')
		mvn test -Dtest=$testclass
	fi
}

# Java Development : Upgrade java services
# jup : Upgrade java services to the latest version
jup() {
  sps
  jid

# Run installation
  ./$JIN-*.sh << EOF

$SITE_NAME

 
EOF
  sv
  sts
}

# Java Development : Download Installer
# jid : Download the latest installer
jid() {
  jind
  rmu 'installers@nzjenkins:/data/installers/latestsingleinstaller/'$(echo $JIN | sed "s/-[^-]*$//")/ . $JIN'-*'
  cplic $JPD
}

jwid() {
  jind
  if [[ -d windows ]]; then
    rm -rf windows
  fi
  scp -r 'installers@nzjenkins:/home/installers/latest/'$JSV windows
}

# Import SQL script to database
# $2 database dump suffix
# sqli tailim : Imports mes_8_csc/man_tailim.sql to mes_8_csc/man if java revision is mes-8
jdi() {
	jdr $1
	sv
	bin/upgrade.sh
	vds
	sqlo $1
}

jdr() {
	vds
  sqli $1
  if [[ -f time.properties ]]; then
    cp time.properties $SV_ROOT/$SV/current/conf/kiwiplan/time.properties
    cp $SV_ROOT/$SV/current/conf/kiwiplan/time.properties $TC_ROOT/$SV/current/kiwiconf/kiwiplan/time.properties
	fi
}

jinmes() {
  echo "### Basic
# Change base?
n
# Site name
$SITE_NAME
# Offset
$OFFSET
# Install
n
# Admin password
admin1
n
### Database
# Hostname
localhost
# Super user name
root
# Super user password
root
# Normal user name
root
# Super user password
root
# Metric
y
$METRIC
n
### Comms
n
# CSC
# Change database name?
n
# Database failed
#
### Manufacturing
# Change database name?
n
# Database failed
#
### Completed
# Configure
e
" | si "#" | ./$JSV-*.sh
}

jintss() {
  mv tss.licence kansas.licence #TODO generate a TSS licence
  echo "### Basic
# Change base?
n
# Site name
$SITE_NAME
# Offset
$OFFSET
# Install
n
# Admin password
admin1
n
### Database
# Hostname
localhost
# Super user name
root
# Super user password
root
# Normal user name
root
# Super user password
root
# Metric
y
$METRIC
n
### Manufacturing Classic DB
#Change database name?
y
${SQL_PREFIX}map
n
### TSS integration
# Unit size calculator
n
# PCS scheduler configuration
y
/kiwi

n
# TSS DB
n
### Completed
# Configure
e
" | si "#" | ./$JSV-*.sh



#  TODO PORT PROBLEM?

  jstss

#  TODO Change pcs properties
}

# TODO Metric depends on current dataset, cds should configure service
# Java Setup: Fresh Service Installation
# jin : Do a fresh installation of the current java revision
jin() {
  rmsite
  jid
  METRIC=n
  OFFSET=0
  case $JPD in
    mes) jinmes;;
    tss) jintss;;
  esac
}

# Java Setup: Debug Trim
# jdt : Turn on debug for trim
jdt() {
  sv
  cat $COMMON/haoyang/trim.log | sed "s/SITE_NAME/$SITE_NAME/" >> conf/log4j.properties
}

# Java : Deploy Web
# jdpw : Deploys the web components in the forklift module
jdpw() {
  pj
  o inv
  o kp-forklift-web
  deploy --nojar
}

# Java : Deploy
# jdp : Deploy all uncommitted changes
# jdp all : Deploy all changes that differ from the parent branch
# jdp <branch> : Deploy all changes that differ from the <branch> branch
jdp() {
	pj
# below for svn
  #modified_projects=("${(@f)$(svnf st | grep "^[A-Z] " | grep -v ^X | grep -v sqlsrc | cut -d " " -f8 | sed "s/src.*//g" | sed "s/war.*//g" | sed "s/test$//g" | sed "s/conf.*//g" | sed "s/pom.xml//g" | sed "s/file.*//g" | sort | uniq)}")
  if [[ $1 == "all" ]]; then
    modified_projects=("${(@f)$(git diff $(vbcp) --name-status | grep -v sqlsrc | grep -v conf | grep -v pom.xml | grep -v .gitignore | grep -v README | grep -v CONTRIBUTING | cut -f2 | sed "s/src.*//g" | sed "s/war.*//g" | sed "s/test$//g" | sed "s/conf.*//g" | sed "s/pom.xml//g" | sed "s/file.*//g" | sort | uniq)}")
  elif [[ $1 != "" ]]; then
    modified_projects=("${(@f)$(git diff $1 --name-status | grep -v sqlsrc | grep -v conf | grep -v pom.xml | grep -v .gitignore | grep -v README | grep -v CONTRIBUTING | cut -f2 | sed "s/src.*//g" | sed "s/war.*//g" | sed "s/test$//g" | sed "s/conf.*//g" | sed "s/pom.xml//g" | sed "s/file.*//g" | sort | uniq)}")
  else
    modified_projects=("${(@f)$(git status -s | grep -v sqlsrc | grep -v conf | grep -v pom.xml | grep -v README | grep -v .gitignore | grep -v CONTRIBUTING | cut -d " " -f3 | sed "s/src.*//g" | sed "s/war.*//g" | sed "s/test$//g" | sed "s/conf.*//g" | sed "s/pom.xml//g" | sed "s/file.*//g" | sort | uniq)}")
  fi
	e
	e Projects modified:
	e
	for project in $modified_projects; do
		echo "* $project"
	done
	e
	e ENTER to proceed, C-c to cancel
	e
	read
  wt jdp
  jdp_failed=false
	for project in $modified_projects; do
		pj
		cd $project
		dp
    if [[ $? -gt 0 ]]; then
      e
      e -------------------------------
      e
      e ${RED}BUILD FAILED !!!!${FINISH}
      e
      e -------------------------------
      e
      jdp_failed=true
      wtu jdp[FAILED]
      break
    fi
	done
  if ! $jdp_failed; then
    ss
    wtu jdp[DONE]
  fi
}

jdpa() {
	pwd=$(pwd)
	jats
  modified_projects=("${(@f)$(find . -maxdepth 3 -name "src" | grep -v conf | sed 's/src$//' | cut -c 3- | sort | uniq)}")
	for project in $modified_projects; do
		d $pwd
		cd $project
		dp
	done
	ss
}

jdpainv() {
  pj
  o inf
  o kp-native-api
  dp || return
  pj
  o mapintegration
  o kp-native
  o kp-native-impl
  dp || return
  pj
  o inv
  dp || return
  ss
}

jja() {
	pj
  modified_projects=("${(@f)$(svnf st | grep "^[A-Z] " | grep -v ^X | grep -v sqlsrc | cut -d " " -f8 | sed "s/src.*//g" | sed "s/war.*//g" | sed "s/test$//g" | sed "s/conf.*//g" | sed "s/pom.xml//g" | sed "s/file.*//g" | sort | uniq)}")
	e
	e Projects modified:
	e
	for project in $modified_projects; do
		echo "* $project"
	done
	e
	e ENTER to proceed, C-c to cancel
	e
	read
	for project in $modified_projects; do
		pj
		cd $project
		e;e;e;e;e;
		e --------------------- BUILDING $project ------------------------
		e;e;e;e;e;
		ja || break
		e;e;e;e;e;
		e --------------------- FINISHED BUILDING $project ------------------------
		e;e;e;e;e;
	done
}

# Java Commit
# jci "Comment" : Commit with "Comment" for the current rev, merging to revisions in $MERGEREV
jci() {
	export MSH_PREFERRED_REPOSITORY_TYPE=SVN
  wtl "Committing"
  pj
  vu
  externals=("${(@f)$(vsm | cut -c9- | cut -d '/' -f 1 | sort | uniq)}")
  vc $1 $externals
  vu
  o ${externals[1]}
  merge_to_rev=$(svnlog haoyang | head -2 | tail -1 | cut -d " " -f 1 | cut -c2-)
  for rev in $MERGEREV; do
    e --- Merging to $rev..
    pjr
    o $rev
    vu
    for external in $externals; do
      o $external
      vbm $JREV $merge_to_rev
      o ..
    done
    vc $1 $externals
    vu
  done
  wtu "Committing [DONE]"
	export MSH_PREFERRED_REPOSITORY_TYPE=GIT
}


# }}}

# Version Control {{{

if [[ $binsvn == "" ]]; then
	binsvn=$(which svn)
fi

svnf() {
	eval "$binsvn $@"
}

svn() {
	if [[ $(vbc) != "vbc"* && $(vbc) != $(vbcp) ]]; then
		echo Don\'t use svn in the $(vbc) branch
	else
		/usr/bin/svn $@
	fi
}

# (Kiwiplan) Version Control : Branch Merge Commit
# vbmc 7.72 8399 : Merge r8399 from branch 7.72 to the working copy
vbmc() {
	svn merge -c $2 $(svn info | s ^URL | cut -d " " -f 2 | sed -r 's/branches\/[^\/]*/branches\/'$1'/')
}
vbmcinv() {
  o inv
  vbmc $@
  o ..
  o inf
  vbmc $@
  o ..
  o mapintegration
  vbmc $@
}

#}}}

#}}}

#### MAP Development {{{

# MAP Navigation {{{

export MAP_REV_SRC=boom_base
export MAP_TRUNK=trunk
export MAP_BRANCH=dev_branches/messaging
export MPJ_ROOT=~/projects/map
export MPJ=kiwi_riegelsville
export MHD=kiwi_head
export MMB=kiwi_riegelsville
export MSVN="svn+ssh://corona2/svn/map"
if [[ $MSH_KIWIPLAN_MODE == "MAP" ]]; then
  export SQL_PREFIX=""
  export SVN=$MSVN
  export PJ_ROOT=$MPJ_ROOT
  export PJ=$MPJ
  export HD=$MHD
  export MB=$MMB
  export SVN=$MSVN
fi

case $MAP_REV_SRC in
boom_base)
  export MAP_REV_SRC_SERVER=nzboom.kiwiplan.co.nz
  export MAP_REV_SRC_DIR=/src
  ;;
boom_haoyang)
  export MAP_REV_SRC_SERVER=nzboom
  export MAP_REV_SRC_DIR=~/projects
  ;;
aurora)
  export MAP_REV_SRC_SERVER=aurora
  export MAP_REV_SRC_DIR=/src
  ;;
esac

export MDS=$CDS/MAP
export KIWIPROGS=/kiwi/progs
export KIWISQL=/kiwi/sql
export KIWISCP=/kiwi/scp
export KIWIBIN=/kiwi/bin
export KIWIETC=/kiwi/etc
export KIWIWORK=/kiwi/work
export KIWISEA=$MDS:$KIWIPROGS:$KIWISQL:$KIWISCP:$KIWIBIN:$KIWIETC:$KIWIWORK
export LD_LIBRARY_PATH=$KIWIPROGS
export KWSQL_USER=$MSH_SQL_USER
export KWSQL_PASS=$MSH_SQL_PASS


alias map="mode <<< 2"

# Go to MAP work directory
mwk() {
  d $KIWIWORK
}

# Restore MAP QA ISAM dataset
rest() {
  ds
  d rest
  r test$1
  d test$1/MAP
  scp -r "ssd@aurora:/mapqa/master_$MAP_DATA_REV/test$1/*" .
  mapprofile
  d ..
  cds
}

# Restore MAP QA SQL dataset
restsql() {
  DIR=$DS/rest/$MAP_DATA_REV
  if [[ ! -f $DIR/test$1.sql ]]; then
    scp ssd@aurora:/mapqa/master_$MAP_DATA_REV/test$1.sql $DIR
  fi
  lndata $DIR/test$1.sql
}


jip() {
  mwk
  jimportpaper
}
jib() {
  mwk
  jimportboard
}
jih() {
  mwk
  jimporthistory
}
jio() {
  mwk
  jimportorder
}
jiq() {
  mwk
  jimportprogset
}
pcs() {
  mwk
  wtt pcs
  pcsmenu
}
csc() {
  mwk
  cscmenu
}
xm() {
  mwk
  xmgen grp=$1
}
ult() {
  wt ult
  mwk
  ult00
  wt
}
rss() {
  mwk
  rss01
}
xl() {
  mwk
  wtt xl
  echo -e "secr8\n" > .secr8
  xlmain -i .secr8
  rm .secr8
}

# }}}

# MAP Setup {{{

PATH=$PATH:/kiwi/bin:/kiwi/progs

# Update MAP rev
upmap() {
  d /kiwi/revisions
  if [[ -d kiwi_$MAP_REV ]]; then
    rm -rf kiwi_$MAP_REV.bak
    mv kiwi_$MAP_REV kiwi_$MAP_REV.bak
  fi
  mkdir kiwi_$MAP_REV
  cd kiwi_$MAP_REV
# Uses ssd as the command could be called from a non authenticated user
  scp -r ssd@$MAP_REV_SRC_SERVER:$MAP_REV_SRC_DIR/kiwi_$MAP_REV/progs progs
  scp -r ssd@$MAP_REV_SRC_SERVER:$MAP_REV_SRC_DIR/kiwi_$MAP_REV/scp scp
  scp -r ssd@$MAP_REV_SRC_SERVER:$MAP_REV_SRC_DIR/kiwi_$MAP_REV/sql sql
  scp -r ssd@$MAP_REV_SRC_SERVER:$MAP_REV_SRC_DIR/kiwi_$MAP_REV/etc etc
  scp -r ssd@$MAP_REV_SRC_SERVER:$MAP_REV_SRC_DIR/kiwi_$MAP_REV/bin bin
}

# Change MAP rev
maprev() {
  menu "echo 'boom_base\nboom_haoyang'"
  mcv MAP_REV_SRC $menu kiwiplan
  menu "ssh ssd@$MAP_REV_SRC_SERVER ls -1d '$MAP_REV_SRC_DIR/kiwi_*' | sed 's/^.*kiwi_//g'"
  mcv MAP_REV $menu kiwiplan
	mr
  rm /kiwi/kiwilink
  if [[ ! -d /kiwi/revisions/kiwi_$menu ]]; then
    upmap
  fi
  ln -s /kiwi/revisions/kiwi_$menu /kiwi/kiwilink
}

mapprofile() {
	echo TERMINAL:vt100 > PROFILE
}

# Change MAP rev for dataset restores
mapdatarev() {
  menu "ssh ssd@felix ls -1d '/mapqa/master_*' | cut -d _ -f 2"
  sed -i -r 's/^export MAP_DATA_REV.*$/export MAP_DATA_REV='$menu'/gi' $ZSHRC
  source $ZSHRC
}

# MAP Setup: MAP Work Cleanup
# mwc : Clean up MAP work directory by removing temp files
mwc() {
  rm *.LS
  rm *.TM
  rm *.XXX
  rm *.LOG
  rm *.log
  rm *.LG
  rm *.LG1
  rm *.OK
  rm *.LK
  rm *.lk
  rm *.TXT
  rm *.txt
  rm trim.log.*
  rm *.out
  rm core
  rm SQLERROR.*
}

# }}}

# MAP Build {{{

# MAP Build: MAP Continuous Integration
# mci : Show the MAP continuous integration status
mci() {
  ssh nzboom ls -lrt /src/CI/logs
}

#}}}
 

# MAP Utils {{{

# MAP Utils : Rename Job
# mrj 1234567 1234567/A : Rename job 1234567 to 1234567/A
mrj() {
  sqle "update map.JBSPEC set job_number='$2' where job_number='$1'"
  sqle "update map.SITEMP set job_number='$2' where job_number='$1'"
  sqle "update map.WORKIP set job_number='$2' where job_number='$1'"
  sqle "update map.FACTRY set job_number='$2' where job_number='$1'"
  sqle "update map.ULOADC set job_number='$2' where job_number='$1'"
  sqle "update map.ULOADH set job_number='$2' where job_number='$1'"
  sqle "update map.DLISTS set load_list_job='$2' where load_list_job='$1'"
  sqle "update map.CORSCH set job_key='$2' where job_key='$1'"
  sqle "update map.CSDATA set job_key='$2' where job_key='$1'"
  sqle "update map.PDETLC set job_key='$2' where job_key='$1'"
  sqle "update map.PDETLH set job_key='$2' where job_key='$1'"
  sqle "update map.XDATA set k1_order='$2' where k1_order='$1'"
  sqle "update map.XDATA set k2_order='$2' where k2_order='$1'"
  sqle "update map.XDATA set k3_order='$2' where k3_order='$1'"
}

#}}}

#}}}

#### SVN GIT Mirroring {{{

vmactive() {
	wt vmactive-$(vbc)
	vmdirs=${(@f)$(ls | grep -v README | grep -v CONTRIBUTING | grep -v pom.xml | grep -v kp-parent)}
	while true; do
		if [[ -a /vmlock/$MSH_VM_ID.$(vbc) ]]; then
			git pull
			if [[ $(svnf st $vmdirs | wc -l) -gt 0 ]] && (git log | s ^Merge: -B1 -A11 | head -4 | grep $MSH_VM_USER || (git log | s ^Merge: -B1 -A11 | head -4 | grep melody && git log | s ^Merge: -B1 -A11 | head -11 | tail -1 | grep $MSH_VM_USER)); then
				message=$(git log | s ^Merge: -B1 -A11 | head -10 | tail -1 | cut -c5-)
				if [[ $message != *SCM* ]]; then
					echo Bad message STOP
					break
				fi
				svnf add --force $vmdirs 
				svnf st $vmdirs | grep ^! | awk '{print " --force "$2}' | xargs svn rm
				svnf ci $vmdirs -m \"$message\"
				vcap "After svn commit $message"
			fi
      svnf st $vmdirs | grep ^! | awk '{print " --force "$2}' | xargs svn rm
			# TODO Looks like a local delete incoming delete tree conflict could happen here, which wouldn't be resolved by a svn up accept tf
			svnf up $vmdirs --force --accept tf
			vcap "$(svnf log svn+ssh://corona2/svn/mapjava | head -2 | tail -1 | cut -d\| -f2 | cut -c2-)$(svnf log svn+ssh://corona2/svn/mapjava | head -4 | tail -1)"
			mv /vmlock/$MSH_VM_ID.$(vbc) /vmlock/$MSH_VM_ID_NEXT.$(vbc)
		else
			echo VM is locked.. wait
		fi
		sleep 30
	done
	wt
}

vmsvn() {
	r kp-parent inf inv mapintegration manufacturing-classic tss tss-classic pics
	svnf co $SVN/kp-parent/branches/$1 kp-parent
	svnf co $SVN/inf/branches/$1 inf
	svnf co $SVN/inv/branches/$1 inv
	svnf co $SVN/mapintegration/branches/$1 mapintegration
	svnf co $SVN/manufacturing-classic/branches/$1 manufacturing-classic
	svnf co $SVN/tss/branches/$1 tss
	svnf co $SVN/tss-classic/branches/$1 tss-classic
	svnf co $SVN/pics/branches/$1 pics
}

vmpassive() {
        wt vmpassive-$(vbc)
	vmdirs=${(@f)$(ls | grep -v README | grep -v CONTRIBUTING | grep -v pom.xml | grep -v kp-parent)}
	while true; do
		if [[ -a /vmlock/$MSH_VM_ID.$(vbc) ]]; then
			git reset --hard
			vsur
			git pull || break
			if [[ $(svnf st $vmdirs | wc -l) -gt 0 ]] && (git log | s ^Merge: -B1 -A11 | head -4 | grep $MSH_VM_USER || (git log | s ^Merge: -B1 -A11 | head -4 | grep melody && git log | s ^Merge: -B1 -A11 | head -11 | tail -1 | grep $MSH_VM_USER)); then
				message=$(git log | s ^Merge: -B1 -A11 | head -10 | tail -1 | cut -c5-)
				if [[ $message != *SCM* ]]; then
					echo Bad message STOP
					break
				fi
				svnf add --force $vmdirs
				svnf st $vmdirs | grep ^! | awk '{print " --force "$2}' | xargs svn rm
				svnf ci $vmdirs -m \"$message\"
				vcap "After svn commit $message"
			fi
			svnf up $vmdirs --force --accept mf
			mv /vmlock/$MSH_VM_ID.$(vbc) /vmlock/$MSH_VM_ID_NEXT.$(vbc)
		else
			echo VM is locked.. wait
		fi
		sleep 30
	done
	wt
}

# Version Mirroring : Skip
# vmskip 1 2 : Skip VM ID 1, moving lock on 1 directly to lock on 2, without vm 1 running
vmskip() {
        wt vmskip-$1-$2-$(vbc)
	while true; do
		if [[ -a /vmlock/$1.$(vbc) ]]; then
			mv /vmlock/$1.$(vbc) /vmlock/$2.$(vbc)
			echo VM lock moved from $1 to $2
		else
			echo VM is locked.. wait
		fi
		sleep 30
	done
	wt
}

vmdev() {
	while true; do
		vb 8.40
		vu
		vb dev
		vu
		git merge --no-edit 8.40
		vp
		sleep 60
	done
}

#}}}

#### Auto Deploy {{{

autojup() {
	setopt localoptions rmstarsilent
	while true; do
		date +%H
		if [[ $(date +%H) == 06 ]]; then
			jup
			re

			sv
			chmod 777 -R .
			d ..
			for svrev in *; do
				if [[ $svrev != "current" && $svrev != $(rnode $(ls -l current | ac 11) / 0) ]]; then
					r $svrev;
				fi;
			done

			tc
			chmod 777 -R .
			d ..
			for svrev in *; do
				if [[ $svrev != "current" && $svrev != $(rnode $(ls -l current | ac 11) / 0) ]]; then
					r $svrev;
				fi;
			done
			e Upgraded
		fi
		sleep 3600
	done
}

ssmonitor() {
	export LANG=en_US.UTF-8
	while true; do
		if [[ -a /vmlock/ssrequest ]]; then
			e ssrequest found
			ss
			r /vmlock/ssrequest
			e ss complete
		fi
		sss
		sleep 60
	done
}

#}}}
